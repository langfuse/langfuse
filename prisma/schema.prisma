// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol", "tracing"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?    @map("email_verified")
    password      String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    memberships   Membership[]
    createdAt     DateTime     @default(now()) @map("created_at")
    updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at")

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Project {
    id        String       @id @default(cuid())
    createdAt DateTime     @default(now()) @map("created_at")
    name      String
    members   Membership[]
    traces    Trace[]
    apiKeys   ApiKey[]

    @@map("projects")
}

model ApiKey {
    id               String    @id @unique @default(cuid())
    createdAt        DateTime  @default(now()) @map("created_at")
    note             String?
    publishableKey   String    @unique @map("publishable_key")
    hashedSecretKey  String    @unique @map("hashed_secret_key")
    displaySecretKey String    @map("display_secret_key")
    lastUsedAt       DateTime? @map("last_used_at")
    expiresAt        DateTime? @map("expires_at")
    projectId        String    @map("project_id")
    project          Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@map("api_keys")
}

model Membership {
    projectId String         @map("project_id")
    project   Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    userId    String         @map("user_id")
    user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    role      MembershipRole
    createdAt DateTime       @default(now()) @map("created_at")
    updatedAt DateTime       @default(now()) @updatedAt @map("updated_at")

    @@id([projectId, userId])
    @@map("memberships")
}

enum MembershipRole {
    OWNER
    ADMIN
    MEMBER
}

model Trace {
    id         String   @id @default(cuid())
    externalId String?  @map("external_id")
    timestamp  DateTime @default(now())
    name       String?
    metadata   Json?
    projectId  String   @map("project_id")
    project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

    observations Observation[]
    scores       Score[]

    @@unique([projectId, externalId])
    @@map("traces")
}

model Observation {
    id                  String           @id @default(cuid())
    traceId             String           @map("trace_id")
    trace               Trace            @relation(fields: [traceId], references: [id], onDelete: Cascade)
    type                ObservationType
    startTime           DateTime         @default(now()) @map("start_time")
    endTime             DateTime?        @map("end_time")
    name                String?
    metadata            Json?
    parentObservationId String?          @map("parent_observation_id")
    level               ObservationLevel @default(DEFAULT)
    statusMessage       String?          @map("status_message")

    // GENERATION ONLY
    model           String?
    modelParameters Json?
    input           Json?
    output          Json?
    usage           Json?

    parent Observation?  @relation("ParentChilds", fields: [parentObservationId], references: [id])
    childs Observation[] @relation("ParentChilds")
    scores Score[]

    @@map("observations")
}

enum ObservationType {
    SPAN
    EVENT
    GENERATION
}

enum ObservationLevel {
    DEBUG
    DEFAULT
    WARNING
    ERROR
}

model Score {
    id            String       @id @default(cuid())
    timestamp     DateTime     @default(now())
    name          String
    value         Int
    traceId       String       @map("trace_id")
    trace         Trace        @relation(fields: [traceId], references: [id], onDelete: Cascade)
    observationId String?      @map("observation_id")
    observation   Observation? @relation(fields: [observationId], references: [id], onDelete: SetNull)

    @@map("scores")
}
