// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Trace {
    id            String        @id @default(cuid())
    timestamp     DateTime      @default(now())
    name          String
    attributes    Json
    status        String
    statusMessage String?       @map("status_message")
    observations  Observation[]
    scores        Score[]

    @@map("traces")
}

model Observation {
    id                  String          @id @default(cuid())
    traceId             String
    trace               Trace           @relation(fields: [traceId], references: [id], onDelete: Cascade)
    type                ObservationType
    name                String
    startTime           DateTime        @default(now()) @map("start_time")
    endTime             DateTime?       @map("end_time")
    attributes          Json
    parentObservationId String?         @map("parent_observation_id")
    parent              Observation?    @relation("ParentChilds", fields: [parentObservationId], references: [id])
    childs              Observation[]   @relation("ParentChilds")
    scores              Score[]

    @@map("observations")
}

enum ObservationType {
    SPAN
    EVENT
    LLMCALL
}

model Score {
    id            String       @id @default(cuid())
    timestamp     DateTime     @default(now())
    name          String
    value         Int
    traceId       String
    trace         Trace        @relation(fields: [traceId], references: [id], onDelete: Cascade)
    observationId String?
    observation   Observation? @relation(fields: [observationId], references: [id], onDelete: SetNull)

    @@map("scores")
}
