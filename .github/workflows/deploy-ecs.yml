name: Deploy to ECS

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  IMAGE_TAG: ${{ github.sha }}
  ECR_REPOSITORY_WEB: ${{ secrets.ECR_REPOSITORY_WEB }}
  ECR_REPOSITORY_WORKER: ${{ secrets.ECR_REPOSITORY_WORKER }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE_WEB: ${{ secrets.ECS_SERVICE_WEB }}
  ECS_SERVICE_WORKER: ${{ secrets.ECS_SERVICE_WORKER }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # for OIDC
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set ECR registry env
        run: echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV

      - name: Build and push Web image
        run: |
          docker build -f web/Dockerfile -t "$ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG"

      - name: Build and push Worker image
        run: |
          docker build -f worker/Dockerfile -t "$ECR_REGISTRY/$ECR_REPOSITORY_WORKER:$IMAGE_TAG" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY_WORKER:$IMAGE_TAG"

      - name: Render task definition (Web)
        id: render-web
        uses: aws-actions/amazon-ecs-render-task-definition@v2
        with:
          task-definition: infra/ecs/taskdef-web.json
          container-name: web
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_WEB }}:${{ env.IMAGE_TAG }}

      - name: Deploy ECS service (Web)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-web.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_WEB }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Render task definition (Worker)
        id: render-worker
        uses: aws-actions/amazon-ecs-render-task-definition@v2
        with:
          task-definition: infra/ecs/taskdef-worker.json
          container-name: worker
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_WORKER }}:${{ env.IMAGE_TAG }}

      - name: Deploy ECS service (Worker)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-worker.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_WORKER }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true


