name: WorkflowCall - Deploy to ECS Service
on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: Deployment environment
        required: true
      service:
        type: string
        description: Name of the service to be deployed, e.g. web-ingestion, web, or worker.
        required: true
jobs:
  ecs-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Get app name
        uses: winterjung/split@v2
        id: split
        with:
          msg: ${{ inputs.service }}
          separator: "-"
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Preflight - verify AWS identity and ECS resources
        run: |
          set -e
          echo "Verifying caller identity"
          aws sts get-caller-identity | cat
          echo "Verifying cluster exists: ${{ inputs.environment }}-cluster"
          aws ecs describe-clusters --clusters "${{ inputs.environment }}-cluster" | cat
          echo "Verifying service exists: ${{ inputs.environment }}-${{ inputs.service }}"
          aws ecs describe-services --cluster "${{ inputs.environment }}-cluster" --services "${{ inputs.environment }}-${{ inputs.service }}" | cat
          echo "Attempting to describe task definitions by family (this may fail before first register): langfuse-${{ inputs.service }}"
          aws ecs list-task-definitions --family-prefix "langfuse-${{ inputs.service }}" --sort DESC --max-items 5 | cat || true
          echo "Checking current running tasks"
          aws ecs list-tasks --cluster "${{ inputs.environment }}-cluster" --service-name "${{ inputs.environment }}-${{ inputs.service }}" | cat || true
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ steps.split.outputs._0 }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            -t $REGISTRY/$REPOSITORY:$IMAGE_TAG \
            -f ./${{ steps.split.outputs._0 }}/Dockerfile \
            --build-arg NEXT_PUBLIC_LANGFUSE_CLOUD_REGION=${{ vars.NEXT_PUBLIC_LANGFUSE_CLOUD_REGION }} \
            --build-arg NEXT_LANGFUSE_TRACING_SAMPLE_RATE=${{ vars.NEXT_LANGFUSE_TRACING_SAMPLE_RATE }} \
            --build-arg NEXT_PUBLIC_SENTRY_ENVIRONMENT=${{ vars.NEXT_PUBLIC_SENTRY_ENVIRONMENT }} \
            --build-arg NEXT_PUBLIC_DEMO_ORG_ID=${{ vars.NEXT_PUBLIC_DEMO_ORG_ID }} \
            --build-arg NEXT_PUBLIC_DEMO_PROJECT_ID=${{ vars.NEXT_PUBLIC_DEMO_PROJECT_ID }} \
            --build-arg NEXT_PUBLIC_SENTRY_DSN=${{ vars.NEXT_PUBLIC_SENTRY_DSN }} \
            --build-arg NEXT_PUBLIC_BUILD_ID=${{ github.sha }} \
            --build-arg NEXT_PUBLIC_POSTHOG_KEY=${{ vars.NEXT_PUBLIC_POSTHOG_KEY }} \
            --build-arg NEXT_PUBLIC_POSTHOG_HOST=${{ vars.NEXT_PUBLIC_POSTHOG_HOST }} \
            --build-arg NEXT_PUBLIC_PLAIN_APP_ID=${{ vars.NEXT_PUBLIC_PLAIN_APP_ID }} \
            --build-arg SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} \
            --build-arg SENTRY_ORG=${{ vars.SENTRY_ORG }} \
            --build-arg SENTRY_PROJECT=${{ vars.SENTRY_PROJECT }} \
            --build-arg NEXT_PUBLIC_LANGFUSE_TRACING_SAMPLE_RATE=${{ vars.NEXT_PUBLIC_LANGFUSE_TRACING_SAMPLE_RATE }} \
            .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      - name: Render AWS ECS Task Definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: infra/ecs/taskdef-${{ inputs.service }}.json
          container-name: ${{ inputs.service }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ steps.split.outputs._0 }}:${{ github.sha }}
      - name: Update AWS ECS Service
        id: deploy-service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          service: ${{ inputs.environment }}-${{ inputs.service }}
          cluster: ${{ inputs.environment }}-cluster
          wait-for-service-stability: true
      - name: Debug - Check ECS service status on failure
        if: failure()
        run: |
          echo "Deployment failed. Gathering debug information..."
          echo "=== ECS Service Status ==="
          aws ecs describe-services \
            --cluster "${{ inputs.environment }}-cluster" \
            --services "${{ inputs.environment }}-${{ inputs.service }}" \
            --output json | jq '.services[0] | {serviceName, status, runningCount, pendingCount, desiredCount, deployments: [.deployments[] | {id: .id, status, taskDefinition, createdAt, updatedAt}]}'
          
          echo "=== ECS Tasks ==="
          TASK_ARNS=$(aws ecs list-tasks \
            --cluster "${{ inputs.environment }}-cluster" \
            --service-name "${{ inputs.environment }}-${{ inputs.service }}" \
            --query 'taskArns' --output text)
          
          if [ ! -z "$TASK_ARNS" ]; then
            aws ecs describe-tasks \
              --cluster "${{ inputs.environment }}-cluster" \
              --tasks $TASK_ARNS \
              --output json | jq '.tasks[] | {taskArn, lastStatus, healthStatus, containers: [.containers[] | {name, lastStatus, healthStatus, exitCode, reason}]}'
          fi
          
          echo "=== Recent CloudWatch Logs ==="
          aws logs describe-log-streams \
            --log-group-name "/ecs/langfuse/${{ inputs.service }}" \
            --order-by LastEventTime \
            --descending \
            --max-items 3 \
            --query 'logStreams[*].logStreamName' \
            --output text | head -1 | xargs -I {} aws logs get-log-events \
            --log-group-name "/ecs/langfuse/${{ inputs.service }}" \
            --log-stream-name {} \
            --limit 50 \
            --query 'events[*].message' \
            --output text || echo "No logs available yet"
          
          echo "=== ECS Service Events ==="
          aws ecs describe-services \
            --cluster "${{ inputs.environment }}-cluster" \
            --services "${{ inputs.environment }}-${{ inputs.service }}" \
            --query 'services[0].events[:10]' \
            --output table || true
