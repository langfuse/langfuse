const translation = {
  form: {
    metadataOptional: "Metadata (optional)",
    input: "Input",
    expectedOutput: "Expected output",
    targetDatasets: "Target datasets",
    selectDatasets: "Select datasets",
    searchDatasets: "Search datasets...",
    noDatasetsFound: "No datasets found.",
    current: "(current)",
    descriptionOptional: "Description (optional)",
    typeToConfirmDeletion: 'Type "{datasetName}" to confirm deletion',
  },
  pages: {
    title: "Datasets",
    description:
      "Datasets in Langfuse are a collection of inputs (and expected outputs) of an LLM application. They are used to benchmark new releases before deployment to production. See docs to learn more.",
    compareDescription: "Compare your dataset runs side by side",
  },
  items: {
    title: "Items",
    archive: "Archive",
    unarchive: "Unarchive",
    deleteConfirmation: "Are you sure you want to delete this item? This will also delete all run items that belong to this item.",
    archiveConfirmation: "Archive this item?",
    unarchiveConfirmation: "Unarchive this item?",
    archiveDescription: "Archiving an item will exclude it from new dataset runs.",
    unarchiveDescription: "Unarchiving an item will include it back in new dataset runs.",
  },
  itemsTable: {
    itemId: "Item id",
    sourceDescription: "Link to the source trace based on which this item was added",
    input: "Input",
    expectedOutput: "Expected Output",
    archive: "Archive",
    unarchive: "Unarchive",
    deleteConfirmation: "Are you sure you want to delete this dataset item?",
  },
  runs: {
    title: "Runs",
    details: "Run details",
  },
  compare: {
    selectRuns: "Select runs to compare",
    compareDatasetRuns: "Compare Dataset Runs",
    allTime: "All time",
    newDatasetRun: "New dataset run",
    noDescription: "No description",
    allChartsHidden: "All charts hidden. Enable them in settings.",
    selectMoreRuns: "Select more than one run to generate charts.",
    itemId: "Item id",
    input: "Input",
    expectedOutput: "Expected Output",
    runMetrics: "Run metrics",
    scores: "Scores",
    latencyAndCost: "Latency and cost",
  },
  actions: {
    createDataset: "Create dataset",
    updateDataset: "Update dataset",
    deleteDataset: "Delete Dataset",
    add: "Add",
    toDataset: "to dataset",
    toDatasets: "to {{count}} datasets",
    saveChanges: "Save changes",
    saved: "Saved",
    runTriggered: "Dataset run triggered successfully",
    runTriggeredDescription: "Waiting for dataset run to complete...",
    viewRun: "View dataset run",
  },
  validation: {
    inputRequired: "Input is required",
    inputShouldNotBeWhitespace: "Input should not be only whitespace",
    invalidInputJson: "Invalid input. Please provide a JSON object or double-quoted string.",
    selectAtLeastOneDataset: "Select at least one dataset",
  },
  errors: {
    invalidFileType: "Invalid file type",
    selectValidCsvFile: "Please select a valid CSV file",
    fileTooLarge: "File too large",
    maxFileSize10MB: "Maximum file size is 10MB",
    invalidCsv: "Invalid CSV",
    csvMustHaveOneColumn: "CSV must have at least 1 column",
    failedToParseCsv: "Failed to parse CSV",
    unknownError: "Unknown error",
    datasetNameAlreadyExists: "Dataset name already exists.",
    pleaseTypeCorrectDatasetName: "Please type the correct dataset name to confirm deletion",
  },
  upload: {
    addItemsToDataset: "Add items to dataset",
    addItemsDescription: "Add items to dataset by uploading a file, add items manually or via our SDKs/API",
    clickToSelectCsvFile: "Click to select a CSV file",
  },
  table: {
    items: "Items",
    lastRun: "Last Run",
  },
  csvImport: {
    importFile: "Import {{fileName}}",
    mapCsvColumns: "Map your CSV columns to dataset fields. The CSV file must have column headers in the first row.",
    input: "Input",
    expectedOutput: "Expected Output",
    notMapped: "Not mapped",
    notMappedInfo: "These columns from your CSV will not be imported. Drag them to a field to include them.",
    fileTooLarge: "File too large",
    maxFileSize: "Maximum file size is 10MB",
    missingColumns: "Missing columns: {{columns}}",
    errorProcessingRow: "Error processing row {{rowNumber}}: {{error}}",
    failedToImportAll: "Failed to import all dataset items",
    tryAgainFromRow: "Please try again starting from row {{rowNumber}}.",
  },
  runsTable: {
    runItems: "Run Items",
    latencyAvg: "Latency (avg)",
    totalCostAvg: "Total Cost (avg)",
    runLevelScores: "Run-level Scores",
    aggregatedRunItemsScores: "Aggregated Run Items Scores",
    actionsSelected: "Actions ({{count}} selected)",
    compare: "Compare",
    deleteConfirmation: "This action cannot be undone and removes all the data associated with {{count}} dataset run{{countPlural}}.",
    deleteDatasetRuns: "Delete Dataset Runs",
  },
  aggregateCell: {
    noScores: "No scores",
    compareExpectedActual: "Compare expected output with actual output",
    expectedOutputActualOutput: "Expected Output â†’ Actual Output",
    expectedOutput: "Expected Output",
    actualOutput: "Actual Output",
  },
  runItemsTable: {
    runAt: "Run At",
    runName: "Run Name",
    datasetItem: "Dataset Item",
    trace: "Trace",
    latency: "Latency",
    cost: "Cost",
    traceInput: "Trace Input",
    input: "Input",
    traceOutput: "Trace Output",
    output: "Output",
    expectedOutput: "Expected Output",
    traceObservation: "Trace: {{traceId}}, Observation: {{observationId}}",
    traceOnly: "Trace: {{traceId}}",
  },
};

export default translation;
