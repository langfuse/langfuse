const translation = {
  slack: {
    testMessage: {
      sendTestMessage: "Send Test Message",
      sending: "Sending...",
      sent: "Test Message Sent",
      sentDescription: "Test message sent successfully to the selected channel.",
      failedToSend: "Failed to Send Test Message",
    },
    connect: {
      connectSlack: "Connect Slack",
      connecting: "Connecting...",
      connected: "Slack Connected",
      connectedDescription: "Successfully connected to {{teamName}}.",
      connectionFailed: "Connection Failed",
      installUrlNotAvailable: "Install URL not available. Please try again.",
      popupBlocked: "Popup blocked. Please allow popups and try again.",
      failedToConnect: "Failed to connect to Slack",
    },
    disconnect: {
      disconnect: "Disconnect",
      disconnecting: "Disconnecting...",
      disconnected: "Slack Disconnected",
      disconnectedDescription: "Successfully disconnected from your Slack workspace.",
      disconnectionFailed: "Disconnection Failed",
      failedToDisconnect: "Failed to disconnect from Slack",
      dialogTitle: "Disconnect Slack Integration",
      confirmationMessage: "Are you sure you want to disconnect your Slack workspace from this project?",
      thisWill: "This will:",
      removeBot: "Remove the bot from your Slack workspace",
      disableAutomations: "Disable all existing Slack automations",
      stopNotifications: "Stop all future Slack notifications",
      deleteCredentials: "Delete stored workspace credentials",
      reconnectNote: "You can reconnect at any time, but you'll need to reconfigure your automations.",
    },
  },
  types: {
    webhook: "Webhook",
    slack: "Slack",
    annotationQueue: "Annotation Queue",
  },
  form: {
    permissionDenied: "Permission Denied",
    permissionDeniedDescription: "You don't have permission to modify automations.",
    validationError: "Validation Error",
    validationErrorDescription: "Please fill in all required fields",
    automationUpdated: "Automation Updated",
    automationUpdatedDescription: 'Successfully updated automation "{{name}}".',
    automationCreated: "Automation Created",
    automationCreatedDescription: 'Successfully created automation "{{name}}".',
    updateAutomation: "Update Automation",
    saveAutomation: "Save Automation",
  },
  actions: {
    slackAction: {
      channel: "Channel",
      selectChannel: "Select a channel",
      channelDescription: "Select the Slack channel where notifications will be sent.",
      testChannel: "Test Channel",
      testChannelDescription: "Test this channel to verify the bot can send messages.",
    },
    webhookAction: {
      urlRequired: "Webhook URL is required",
      webhookUrl: "Webhook URL",
      urlDescription: "The HTTP URL to call when the trigger fires. We will send a POST request to this URL. Only HTTPS URLs are allowed for security.",
      apiVersion: "API Version",
      selectApiVersion: "Select API version",
      apiVersionDescription: "The API version to use for the webhook payload format when prompt events are triggered.",
      headers: "Headers",
      defaultHeadersDescription: "Default headers (automatically added by Langfuse):",
      customHeadersDescription: "Optional custom headers to include in the webhook request:",
      headerName: "Header Name",
      headerValue: "Value",
      makeHeaderPublic: "Make header public",
      makeHeaderSecret: "Make header secret",
      addCustomHeader: "Add Custom Header",
      webhookSecret: "Webhook Secret",
      webhookSecretDescription: "Use this secret to verify webhook signatures for security. The secret is automatically included in the x-langfuse-signature header.",
      secretEncryptedNote: "Secret is encrypted and can only be viewed when generated or regenerated",
      secretWillBeGenerated: "Webhook secret will be generated when the automation is created.",
    },
  },
  success: {
    webhookSecretRegenerated: "Webhook Secret Regenerated",
    webhookSecretRegeneratedDescription: "Your webhook secret has been successfully regenerated.",
  },
  formLabels: {
    eventActions: "Event Actions",
    actions: "Actions",
  },
};

export default translation;
