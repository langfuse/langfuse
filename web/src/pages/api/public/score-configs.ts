import {
  type CastedConfig,
  paginationZod,
  ScoreDataType,
  jsonSchema,
  type PrismaClient,
  type CreateConfig,
} from "@langfuse/shared";
import { z } from "zod";
import { prisma } from "@langfuse/shared/src/db";
import { Prisma } from "@langfuse/shared/src/db";
import { type NextApiRequest, type NextApiResponse } from "next";
import { cors, runMiddleware } from "@/src/features/public-api/server/cors";
import { verifyAuthHeaderAndReturnScope } from "@/src/features/public-api/server/apiAuth";
import { isPrismaException } from "@/src/utils/exceptions";
import {
  isBooleanDataType,
  isCastedConfig,
  isCastedConfigCategory,
  isCategoricalDataType,
  validateScoreConfig,
} from "@/src/features/manual-scoring/lib/helpers";
import { v4 } from "uuid";

const ScoreConfigsPostSchema = z.object({
  name: z.string(),
  dataType: z.nativeEnum(ScoreDataType),
  categories: jsonSchema.optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  description: z.string().optional(),
});

const ScoreConfigsGetSchema = z.object({
  ...paginationZod,
});

const inflateConfigBody = (
  body: z.infer<typeof ScoreConfigsPostSchema>,
): z.infer<typeof ScoreConfigsPostSchema> => {
  if (isBooleanDataType(body.dataType)) {
    return {
      ...body,
      categories: [
        { label: "True", value: 1 },
        { label: "False", value: 0 },
      ],
    };
  }
  return body;
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse,
) {
  await runMiddleware(req, res, cors);

  try {
    // CHECK AUTH
    const authCheck = await verifyAuthHeaderAndReturnScope(
      req.headers.authorization,
    );
    if (!authCheck.validKey) {
      return res.status(401).json({
        message: authCheck.error,
      });
    }
    // END CHECK AUTH

    if (req.method !== "GET" && req.method !== "POST") {
      return res.status(405).json({ message: "Method not allowed" });
    }

    if (req.method === "POST") {
      try {
        const input = ScoreConfigsPostSchema.parse(req.body);

        const existingConfig = await prisma.scoreConfig.findFirst({
          where: {
            projectId: authCheck.scope.projectId,
            name: input.name,
            dataType: input.dataType,
          },
        });

        if (existingConfig) {
          throw new Error(
            "Score config with this name and data type already exists for this project",
          );
        }

        if (input.categories) {
          if (!isCategoricalDataType(input.dataType))
            throw new Error(
              "Custom categories are only allowed for categorical data types and will be autogenerated for boolean data types.",
              { cause: "Invalid request data format" },
            );
          if (!isCastedConfigCategory(input.categories))
            throw new Error(
              "Invalid categories format, must be an array of objects with label and value keys.",
              { cause: "Invalid request data format" },
            );
        }

        const inflatedConfigInput = inflateConfigBody(input);
        const error = validateScoreConfig(inflatedConfigInput as CreateConfig);

        if (error) {
          throw new Error(error, { cause: "Invalid request data format" });
        }

        const config = await createScoreConfig({
          ...inflatedConfigInput,
          id: v4(),
          projectId: authCheck.scope.projectId,
          prisma: prisma,
        });

        return res.status(201).json(config);
      } catch (error: unknown) {
        console.error(error);
        if (isPrismaException(error)) {
          return res.status(500).json({
            error: "Internal Server Error",
          });
        }
        if (error instanceof z.ZodError) {
          return res.status(400).json({
            message: "Invalid request data",
            error: error.errors,
          });
        }
        if (
          error instanceof Error &&
          error.cause === "Invalid request data format"
        ) {
          return res.status(400).json({
            message: "Invalid request data",
            error: error.message,
          });
        }

        const errorMessage =
          error instanceof Error ? error.message : "An unknown error occurred";
        res.status(500).json({
          message: "Sever error",
          error: errorMessage,
        });
      }
    } else if (req.method === "GET") {
      if (authCheck.scope.accessLevel !== "all") {
        return res.status(401).json({
          message: "Access denied - need to use basic auth with secret key",
        });
      }

      const obj = ScoreConfigsGetSchema.parse(req.query);

      const rawConfigs = await prisma.scoreConfig.findMany({
        where: {
          projectId: authCheck.scope.projectId,
        },
        orderBy: {
          createdAt: "desc",
        },
        take: obj.limit,
        skip: (obj.page - 1) * obj.limit,
      });

      const configs: CastedConfig[] = rawConfigs.filter(isCastedConfig);

      if (configs.length !== rawConfigs.length) {
        return res.status(500).json({
          message: "Internal Server Error",
          error: "Invalid config format encountered",
        });
      }

      const totalItemsRes = await prisma.$queryRaw<{ count: bigint }[]>(
        Prisma.sql`
          SELECT 
            COUNT(*) as count
          FROM 
            "score_configs" AS sc
          WHERE sc.project_id = ${authCheck.scope.projectId}
        `,
      );

      const totalItems =
        totalItemsRes[0] !== undefined ? Number(totalItemsRes[0].count) : 0;

      return res.status(200).json({
        data: configs,
        meta: {
          page: obj.page,
          limit: obj.limit,
          totalItems,
          totalPages: Math.ceil(totalItems / obj.limit),
        },
      });
    }
  } catch (error: unknown) {
    console.error(error);
    if (isPrismaException(error)) {
      return res.status(500).json({
        error: "Internal Server Error",
      });
    }
    if (error instanceof z.ZodError) {
      return res.status(400).json({
        message: "Invalid request data",
        error: error.errors,
      });
    }
    const errorMessage =
      error instanceof Error ? error.message : "An unknown error occurred";
    res.status(500).json({
      message: "Invalid request data",
      error: errorMessage,
    });
  }
}
async function createScoreConfig({
  id,
  name,
  dataType,
  categories,
  minValue,
  maxValue,
  description,
  projectId,
  prisma,
}: z.infer<typeof ScoreConfigsPostSchema> & {
  id: string;
  projectId: string;
  prisma: PrismaClient;
}) {
  return await prisma.scoreConfig.create({
    data: {
      id,
      name,
      dataType,
      categories,
      minValue,
      maxValue,
      projectId,
      description,
    },
  });
}
